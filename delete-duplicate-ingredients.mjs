#!/usr/bin/env node

/**
 * SanityÊàêÂàÜ„Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆÈáçË§áÂâäÈô§„Çπ„ÇØ„É™„Éó„Éà
 *
 * ÂâäÈô§ÂØæË±°:
 * - „Ç´„É™„Ç¶„É†: 5v8OuqFn5O4X8PYE5dNHcE
 * - „Ç∞„É´„Ç≥„Çµ„Éü„É≥: P1Z7m8fgwpF7BuhejyHKwp
 * - „Éä„Ç§„Ç¢„Ç∑„É≥Ôºà„Éì„Çø„Éü„É≥B3Ôºâ: pRlcpvz6Xc5z2Mc0MBzKvk
 * - „Éì„Çø„Éü„É≥AÔºà„É¨„ÉÅ„Éé„Éº„É´Ôºâ: pRlcpvz6Xc5z2Mc0MBzKZo
 * - „Éì„Çø„Éü„É≥B12Ôºà„Ç≥„Éê„É©„Éü„É≥Ôºâ: 7MAYpyO4GR94MtR0V9EtND
 * - „Éì„Çø„Éü„É≥K: 7MAYpyO4GR94MtR0V9EtGp
 * - „É®„Ç¶Á¥†: 5v8OuqFn5O4X8PYE5dNHii
 * - „É´„ÉÜ„Ç§„É≥: P1Z7m8fgwpF7BuhejyHKyQ
 */

import { createClient } from '@sanity/client';
import { readFileSync } from 'fs';

// Áí∞Â¢ÉÂ§âÊï∞„ÅÆË™≠„ÅøËæº„ÅøÔºà.env.local„Åã„ÇâÔºâ
const envPath = 'apps/web/.env.local';
let projectId, dataset, token;

try {
  const envContent = readFileSync(envPath, 'utf-8');
  envContent.split('\n').forEach(line => {
    if (line.startsWith('NEXT_PUBLIC_SANITY_PROJECT_ID=')) {
      projectId = line.split('=')[1].trim();
    } else if (line.startsWith('NEXT_PUBLIC_SANITY_DATASET=')) {
      dataset = line.split('=')[1].trim();
    } else if (line.startsWith('SANITY_API_TOKEN=')) {
      token = line.split('=')[1].trim();
    }
  });
} catch (err) {
  console.error('‚ùå .env.local„ÅåË™≠„ÅøËæº„ÇÅ„Åæ„Åõ„Çì:', err.message);
  process.exit(1);
}

if (!projectId || !token) {
  console.error('‚ùå ÂøÖË¶Å„Å™Áí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
  console.error('  NEXT_PUBLIC_SANITY_PROJECT_ID:', projectId ? '‚úÖ' : '‚ùå');
  console.error('  SANITY_API_TOKEN:', token ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

const client = createClient({
  projectId,
  dataset: dataset || 'production',
  token,
  apiVersion: '2024-01-01',
  useCdn: false,
});

// ÂâäÈô§ÂØæË±°ID
const duplicateIds = [
  "5v8OuqFn5O4X8PYE5dNHcE",   // „Ç´„É™„Ç¶„É†
  "P1Z7m8fgwpF7BuhejyHKwp",   // „Ç∞„É´„Ç≥„Çµ„Éü„É≥
  "pRlcpvz6Xc5z2Mc0MBzKvk",   // „Éä„Ç§„Ç¢„Ç∑„É≥Ôºà„Éì„Çø„Éü„É≥B3Ôºâ
  "pRlcpvz6Xc5z2Mc0MBzKZo",   // „Éì„Çø„Éü„É≥AÔºà„É¨„ÉÅ„Éé„Éº„É´Ôºâ
  "7MAYpyO4GR94MtR0V9EtND",   // „Éì„Çø„Éü„É≥B12Ôºà„Ç≥„Éê„É©„Éü„É≥Ôºâ
  "7MAYpyO4GR94MtR0V9EtGp",   // „Éì„Çø„Éü„É≥K
  "5v8OuqFn5O4X8PYE5dNHii",   // „É®„Ç¶Á¥†
  "P1Z7m8fgwpF7BuhejyHKyQ",   // „É´„ÉÜ„Ç§„É≥
];

async function main() {
  console.log('üóëÔ∏è  SanityÊàêÂàÜ„Éá„Éº„Çø„Éô„Éº„ÇπÈáçË§áÂâäÈô§„Çπ„ÇØ„É™„Éó„Éà\n');
  console.log(`ÂâäÈô§ÂØæË±°: ${duplicateIds.length}‰ª∂\n`);

  // Á¢∫Ë™ç
  console.log('ÂâäÈô§ÂØæË±°„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà:');
  for (const id of duplicateIds) {
    try {
      const doc = await client.getDocument(id);
      console.log(`  - ${doc.name} (${doc.nameEn}) [${id}]`);
    } catch (err) {
      console.log(`  - [${id}] ‚ö†Ô∏è  „Éâ„Ç≠„É•„É°„É≥„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`);
    }
  }

  console.log('\n‚ö†Ô∏è  „Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØÂÆüÈöõ„ÅÆÂâäÈô§„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ');
  console.log('‚ö†Ô∏è  ÂÆüË°åÂâç„Å´ÂøÖ„Åö„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„ÇíÂèñÂæó„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
  console.log('\nÁ∂öË°å„Åô„Çã„Å´„ÅØ --confirm „Éï„É©„Ç∞„Çí‰ªò„Åë„Å¶ÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ:');
  console.log('  node delete-duplicate-ingredients.mjs --confirm\n');

  // --confirm„Éï„É©„Ç∞„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
  if (!process.argv.includes('--confirm')) {
    console.log('‚ùå ÂâäÈô§„ÅØ„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„ÅüÔºà--confirm„Éï„É©„Ç∞„Å™„ÅóÔºâ');
    process.exit(0);
  }

  console.log('\nüöÄ ÂâäÈô§„ÇíÈñãÂßã„Åó„Åæ„Åô...\n');

  // ÂâäÈô§ÂÆüË°å
  let successCount = 0;
  let failCount = 0;

  for (const id of duplicateIds) {
    try {
      await client.delete(id);
      console.log(`‚úÖ ÂâäÈô§ÊàêÂäü: ${id}`);
      successCount++;
    } catch (err) {
      console.error(`‚ùå ÂâäÈô§Â§±Êïó: ${id}`, err.message);
      failCount++;
    }
  }

  console.log('\n' + '='.repeat(70));
  console.log(`\n‚úÖ ÊàêÂäü: ${successCount}‰ª∂`);
  console.log(`‚ùå Â§±Êïó: ${failCount}‰ª∂`);
  console.log(`\nüéâ ÂâäÈô§Âá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ\n`);

  // ÊúÄÁµÇÁ¢∫Ë™ç
  console.log('üìä ÊúÄÁµÇÁ¢∫Ë™ç: ÊÆã„Çä„ÅÆÊàêÂàÜÊï∞„ÇíÁ¢∫Ë™ç‰∏≠...\n');
  const allIngredients = await client.fetch('*[_type == "ingredient"] | order(name asc) {_id, name, nameEn}');
  console.log(`Á∑èÊàêÂàÜÊï∞: ${allIngredients.length}‰ª∂\n`);

  // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
  const nameMap = new Map();
  allIngredients.forEach(item => {
    if (!nameMap.has(item.name)) {
      nameMap.set(item.name, []);
    }
    nameMap.get(item.name).push(item);
  });

  const remainingDuplicates = Array.from(nameMap.entries())
    .filter(([_, items]) => items.length > 1);

  if (remainingDuplicates.length > 0) {
    console.log(`‚ö†Ô∏è  „Åæ„Å†ÈáçË§á„ÅåÊÆã„Å£„Å¶„ÅÑ„Åæ„Åô: ${remainingDuplicates.length}Á®ÆÈ°û`);
    remainingDuplicates.forEach(([name, items]) => {
      console.log(`  - ${name} (${items.length}‰ª∂)`);
    });
  } else {
    console.log('‚úÖ ÈáçË§á„ÅØ„Åô„Åπ„Å¶Ëß£Ê∂à„Åï„Çå„Åæ„Åó„ÅüÔºÅ');
  }
}

main().catch(err => {
  console.error('‚ùå „Ç®„É©„Éº:', err);
  process.exit(1);
});
