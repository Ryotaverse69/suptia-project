name: Deploy with Skills Check

on:
  push:
    branches: [master, main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  pre-deploy-checks:
    name: Pre-deployment Skills Check
    runs-on: ubuntu-latest
    outputs:
      deploy_ready: ${{ steps.checks.outputs.ready }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd .claude/skills && npm ci

      - name: Setup environment
        run: |
          echo "NEXT_PUBLIC_SANITY_PROJECT_ID=${{ secrets.SANITY_PROJECT_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SANITY_DATASET=${{ secrets.SANITY_DATASET }}" >> $GITHUB_ENV
          echo "SANITY_API_TOKEN=${{ secrets.SANITY_API_TOKEN }}" >> $GITHUB_ENV

      - name: Run article validation
        id: validate
        run: |
          echo "### 📝 記事検証" >> $GITHUB_STEP_SUMMARY
          if npm run skill:validate --batch "*-article.json"; then
            echo "✅ 記事検証: 成功" >> $GITHUB_STEP_SUMMARY
            echo "validate_pass=true" >> $GITHUB_OUTPUT
          else
            echo "❌ 記事検証: 失敗" >> $GITHUB_STEP_SUMMARY
            echo "validate_pass=false" >> $GITHUB_OUTPUT
          fi

      - name: Run compliance check
        id: compliance
        run: |
          echo "### ⚖️ 薬機法チェック" >> $GITHUB_STEP_SUMMARY
          if npm run skill:compliance check --all; then
            echo "✅ 薬機法チェック: 合格" >> $GITHUB_STEP_SUMMARY
            echo "compliance_pass=true" >> $GITHUB_OUTPUT
          else
            echo "❌ 薬機法チェック: 不合格" >> $GITHUB_STEP_SUMMARY
            echo "compliance_pass=false" >> $GITHUB_OUTPUT
          fi

      - name: Run deploy readiness check
        id: deploy_check
        run: |
          echo "### 🚀 デプロイ準備チェック" >> $GITHUB_STEP_SUMMARY
          if npm run skill:dev deploy:check; then
            echo "✅ デプロイ準備: 完了" >> $GITHUB_STEP_SUMMARY
            echo "deploy_ready=true" >> $GITHUB_OUTPUT
          else
            echo "❌ デプロイ準備: 未完了" >> $GITHUB_STEP_SUMMARY
            echo "deploy_ready=false" >> $GITHUB_OUTPUT
          fi

      - name: Overall check status
        id: checks
        run: |
          if [[ "${{ steps.validate.outputs.validate_pass }}" == "true" ]] && \
             [[ "${{ steps.compliance.outputs.compliance_pass }}" == "true" ]] && \
             [[ "${{ steps.deploy_check.outputs.deploy_ready }}" == "true" ]]; then
            echo "ready=true" >> $GITHUB_OUTPUT
            echo "## ✅ すべてのチェックに合格しました" >> $GITHUB_STEP_SUMMARY
          else
            echo "ready=false" >> $GITHUB_OUTPUT
            echo "## ❌ デプロイ前チェックに失敗しました" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Upload check reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pre-deploy-reports
          path: |
            .claude/skills/logs/
            .pipeline-output/

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.deploy_ready == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}
          NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.SANITY_DATASET }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: apps/web/.next

  optimize-content:
    name: Optimize Content
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.deploy_ready == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd .claude/skills && npm ci

      - name: Run article optimization pipeline
        run: |
          echo "### 📈 記事最適化パイプライン" >> $GITHUB_STEP_SUMMARY
          npm run skill:pipeline article-complete --save
          echo "✅ 記事最適化完了" >> $GITHUB_STEP_SUMMARY

      - name: Commit optimized articles
        uses: EndBug/add-and-commit@v9
        with:
          message: '📝 Auto-optimize articles before deployment'
          add: '*-article.json'
        if: github.event_name == 'push'

  sync-sanity:
    name: Sync with Sanity
    runs-on: ubuntu-latest
    needs: [build-and-test, optimize-content]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd .claude/skills && npm ci

      - name: Setup environment
        run: |
          echo "SANITY_API_TOKEN=${{ secrets.SANITY_API_TOKEN }}" >> $GITHUB_ENV

      - name: Sync data with Sanity
        run: |
          echo "### 🔄 Sanityデータ同期" >> $GITHUB_STEP_SUMMARY
          npm run skill:dev sanity:sync
          echo "✅ Sanity同期完了" >> $GITHUB_STEP_SUMMARY

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build-and-test, sync-sanity]
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_TEAM_ID }}

      - name: Update deployment summary
        run: |
          echo "### 🎉 デプロイ完了！" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**時刻**: $(date)" >> $GITHUB_STEP_SUMMARY

  post-deploy-validation:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: deploy-vercel

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd .claude/skills && npm ci

      - name: Run E2E tests on production
        run: |
          echo "### 🧪 本番環境E2Eテスト" >> $GITHUB_STEP_SUMMARY
          npm run test:e2e -- --url ${{ needs.deploy-vercel.outputs.url }}
          echo "✅ E2Eテスト合格" >> $GITHUB_STEP_SUMMARY

      - name: Run Lighthouse audit
        run: |
          echo "### 🚦 Lighthouseパフォーマンス監査" >> $GITHUB_STEP_SUMMARY
          npx @lhci/cli autorun --collect.url=${{ needs.deploy-vercel.outputs.url }}
          echo "✅ パフォーマンス監査完了" >> $GITHUB_STEP_SUMMARY

  notify-completion:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-vercel, post-deploy-validation]
    if: always()

    steps:
      - name: Create deployment summary
        run: |
          echo "# 🚀 デプロイメント完了レポート" > deployment-report.md
          echo "" >> deployment-report.md
          echo "**日時**: $(date)" >> deployment-report.md
          echo "**ブランチ**: ${{ github.ref }}" >> deployment-report.md
          echo "**コミット**: ${{ github.sha }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## ステータス" >> deployment-report.md
          echo "- Pre-deploy checks: ✅" >> deployment-report.md
          echo "- Build: ✅" >> deployment-report.md
          echo "- Content optimization: ✅" >> deployment-report.md
          echo "- Sanity sync: ✅" >> deployment-report.md
          echo "- Vercel deployment: ✅" >> deployment-report.md
          echo "- Post-deploy validation: ✅" >> deployment-report.md

      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🚀 Deployment Complete!
            Environment: Production
            URL: ${{ needs.deploy-vercel.outputs.url }}
            Status: ${{ needs.post-deploy-validation.result }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}